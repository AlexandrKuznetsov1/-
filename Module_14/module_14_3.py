# -*- coding: utf-8 -*-

# –¶–µ–ª—å: –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å Telegram-–±–æ—Ç–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
#
# –ó–∞–¥–∞—á–∞ "–í–∏—Ç–∞–º–∏–Ω—ã –¥–ª—è –≤—Å–µ—Ö!":
# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞:
# –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ Telegram-–±–æ—Ç–∞ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è 13 –º–æ—É–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–∏–≤ –∫–æ–¥ —Å –Ω–∏–º –≤ —Ñ–∞–π–ª module_14_3.py.
# –ï—Å–ª–∏ –≤—ã –Ω–µ —Ä–µ—à–∞–ª–∏ –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–æ–¥—É–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏—Ö.
#
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ —Ä–∞–Ω–µ–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è Telegram-–±–æ—Ç–∞:
# –°–æ–∑–¥–∞–π—Ç–µ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:
# –í –≥–ª–∞–≤–Ω—É—é (–æ–±—ã—á–Ω—É—é) –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é –¥–æ–±–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å".
# –°–æ–∑–¥–∞–π—Ç–µ Inline –º–µ–Ω—é –∏–∑ 4 –∫–Ω–æ–ø–æ–∫ —Å –Ω–∞–¥–ø–∏—Å—è–º–∏ "Product1", "Product2", "Product3", "Product4".
# –£ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –Ω–∞–∑–Ω–∞—á—å—Ç–µ callback_data="product_buying"
# –°–æ–∑–¥–∞–π—Ç–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∫ –Ω–∏–º:
# Message —Ö—ç–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç "–ö—É–ø–∏—Ç—å" –∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é get_buying_list(message).
# –§—É–Ω–∫—Ü–∏—è get_buying_list –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–æ–¥–∏—Ç—å –Ω–∞–¥–ø–∏—Å–∏:
# '–ù–∞–∑–≤–∞–Ω–∏–µ: Product<number> | –û–ø–∏—Å–∞–Ω–∏–µ: –æ–ø–∏—Å–∞–Ω–∏–µ <number> | –¶–µ–Ω–∞: <number * 100>' 4 —Ä–∞–∑–∞.
# –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –Ω–∞–¥–ø–∏—Å–∏ –≤—ã–≤–æ–¥–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∫ –ø—Ä–æ–¥—É–∫—Ç–∞–º.
# –í –∫–æ–Ω—Ü–µ –≤—ã–≤–µ–¥–∏—Ç–µ —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ Inline –º–µ–Ω—é —Å –Ω–∞–¥–ø–∏—Å—å—é "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏:".

# Callback —Ö—ç–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç "product_buying" –∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é send_confirm_message(call).
# –§—É–Ω–∫—Ü–∏—è send_confirm_message, –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø—Ä–æ–¥—É–∫—Ç!"

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
import asyncio
from PIL import Image


api = ""
bot = Bot(token=api)
dp = Dispatcher(bot, storage=MemoryStorage())

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
kb1 = ReplyKeyboardMarkup(resize_keyboard=True)
kb2 = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
kb3 = InlineKeyboardMarkup()
kb4 = InlineKeyboardMarkup()

# –ö–Ω–æ–ø–∫–∏
button_hi = KeyboardButton('/start üëã')

button1 = KeyboardButton(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å')
button2 = KeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
button3 = KeyboardButton(text='–ö—É–ø–∏—Ç—å')

in_button1 = InlineKeyboardButton(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π', callback_data='calories')
in_button2 = InlineKeyboardButton(text='–§–æ—Ä–º—É–ª—ã —Ä–∞—Å—á—ë—Ç–∞', callback_data='formulas')
in_button3 = InlineKeyboardButton(text="Product1", callback_data="product_buying")
in_button4 = InlineKeyboardButton(text="Product2", callback_data="product_buying")
in_button5 = InlineKeyboardButton(text="Product3", callback_data="product_buying")
in_button6 = InlineKeyboardButton(text="Product4", callback_data="product_buying")

# –ü—Ä–∏–≤—è–∑–∫–∞ –∫–Ω–æ–ø–æ–∫
kb1.row(button1, button2, button3)
kb2.add(button_hi)
kb3.row(in_button1, in_button2)
kb4.add(in_button3, in_button4, in_button5, in_button6)

# —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ
dict_foto_ = {"Drinks_Hamburger.jpg": '–ì–∞–º–±—É—Ä–≥–µ—Ä - 970 –∫–∞–ª.', "Butterbrot.jpg": '–ë—É—Ç–µ—Ä–±—Ä–æ–¥ - 1500 –∫–∞–ª.',
              "Fast_food_Pizza.jpg": '–ü–∏—Ü—Ü–∞ - 1790 –∫–∞–ª.', "Fast_food_Hot_dog.jpg": '–•–æ—Ç-–¥–æ–≥ - 2440 –∫–∞–ª.'}

class UserState(StatesGroup):
    gender = State()  # –ø–æ–ª
    age = State()  # –≤–æ–∑—Ä–∞—Å—Ç
    growth = State()  # —Ä–æ—Å—Ç
    weight = State()  # –≤–µ—Å

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.reply("–ù–∞–∂–º–∏—Ç–µ '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å'", reply_markup=kb1)

@dp.message_handler(text=['–†–∞—Å—Å—á–∏—Ç–∞—Ç—å'])
async def main_menu(message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', reply_markup=kb3)

@dp.message_handler(text=['–ö—É–ø–∏—Ç—å'])
async def get_buying_list(message):
    for i, j, k in zip(range(1, 5), dict_foto_, dict_foto_.values()):
        await message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ: Product{i} | –û–ø–∏—Å–∞–Ω–∏–µ: {k} | –¶–µ–Ω–∞: {i * 100}")
        with open(f'foto/{j}', 'rb') as img:
            await message.answer_photo(photo=img)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏:', reply_markup=kb4)


@dp.callback_query_handler(text='product_buying')
async def send_confirm_message(call):
    await call.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø—Ä–æ–¥—É–∫—Ç!")

@dp.callback_query_handler(text='formulas')
async def get_formulas(call):
    await call.message.answer("–ñ–µ–Ω—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞: 10 —Ö –≤–µ—Å + 6,25 —Ö —Ä–æ—Å—Ç ‚Äì 5 —Ö –≤–æ–∑—Ä–∞—Å—Ç ‚Äì 161"
                              '\n' "–ú—É–∂—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞: 10 —Ö –≤–µ—Å + 6,25 —Ö —Ä–æ—Å—Ç ‚Äì 5 —Ö –≥–æ–¥–∞ + 5")
    await call.answer()

@dp.callback_query_handler(text='calories')
async def set_gender(call):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª –º—É–∂/–∂–µ–Ω:')
    await UserState.gender.set()
    await call.answer()

@dp.message_handler(state=UserState.gender)
async def set_age(message, state):
    await state.update_data(gender=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:')
    await UserState.age.set()

@dp.message_handler(state=UserState.age)
async def set_growth(message, state):
    await state.update_data(age=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç:')
    await UserState.growth.set()

@dp.message_handler(state=UserState.growth)
async def set_weight(message, state):
    await state.update_data(growth=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å:')
    await UserState.weight.set()

@dp.message_handler(state=UserState.weight)
async def send_calories(message, state):
    await state.update_data(weight=message.text)
    data = await state.get_data()
    if data['gender'] == "–º—É–∂":
        calorie_allowance = ((10 * int(data['weight'])) + (6.25 * int(data['growth'])) - (4.92 * int(data['age'])) + 5)
    elif data['gender'] == "–∂–µ–Ω":
        calorie_allowance = ((10 * int(data['weight'])) + (6.25 * int(data['growth'])) - (4.92 * int(data['age'])) - 161)
    await message.answer(f'–í–∞—à–∞ –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π {calorie_allowance}')
    await state.finish()

@dp.message_handler()
async def all_message(message):
    await message.reply("'–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–º–æ–≥–∞—é—â–∏–π —Ç–≤–æ–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é.'", reply_markup=kb2)
    await message.answer('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.')

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)