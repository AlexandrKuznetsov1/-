# -*- coding: utf-8 -*-

# –ó–∞–¥–∞—á–∞ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π":
# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞:
# –î–ª—è —Ä–µ—à–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –∫–æ–¥ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–¥–∞—á–∏. –î–æ–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ, —Å–ª–µ–¥—É—è –ø—É–Ω–∫—Ç–∞–º –∑–∞–¥–∞—á–∏ –Ω–∏–∂–µ.
#
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ —Ñ–∞–π–ª crud_functions.py, –Ω–∞–ø–∏—Å–∞–≤ –∏ –¥–æ–ø–æ–ª–Ω–∏–≤ –≤ –Ω—ë–º —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:
# initiate_db –¥–æ–ø–æ–ª–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç–∞–±–ª–∏—Ü—ã Users, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –ø–æ–º–æ—â–∏ SQL –∑–∞–ø—Ä–æ—Å–∞.
# –≠—Ç–∞ —Ç–∞–±–ª–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è:
# id - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –ø–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á
# username - —Ç–µ–∫—Å—Ç (–Ω–µ –ø—É—Å—Ç–æ–π)
# email - —Ç–µ–∫—Å—Ç (–Ω–µ –ø—É—Å—Ç–æ–π)
# age - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–Ω–µ –ø—É—Å—Ç–æ–π)
# balance - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–Ω–µ –ø—É—Å—Ç–æ–π)
# add_user(username, email, age), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç: –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ—á—Ç—É –∏ –≤–æ–∑—Ä–∞—Å—Ç.
# –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É Users –≤–∞—à–µ–π –ë–î –∑–∞–ø–∏—Å—å —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
# –ë–∞–ª–∞–Ω—Å —É –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–¥–∞ —Ä–∞–≤–µ–Ω 1000. –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ SQL –∑–∞–ø—Ä–æ—Å.
# is_included(username) –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ Users,
# –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ False. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ SQL –∑–∞–ø—Ä–æ—Å.
#
# –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ Telegram-–±–æ—Ç:
# –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ –∫–Ω–æ–ø–∫–æ–π "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è".
# –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π RegistrationState —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏ –∫–ª–∞—Å—Å–∞ State:
# username, email, age, balance(–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1000).
# –°–æ–∑–¥–∞–π—Ç–µ —Ü–µ–ø–æ—á–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏–π RegistrationState.
# –§—É–Ω–∫—Ü–∏–∏ —Ü–µ–ø–æ—á–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π RegistrationState:
# sing_up(message):
# –û–±–µ—Ä–Ω–∏—Ç–µ –µ—ë –≤ message_handler, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'.
# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–æ–¥–∏—Ç—å –≤ Telegram-–±–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç):".
# –ü–æ—Å–ª–µ –æ–∂–∏–¥–∞—Ç—å –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –≤ –∞—Ç—Ä–∏–±—É—Ç RegistrationState.username –ø—Ä–∏ –ø–æ–º–æ—â–∏ –º–µ—Ç–æ–¥–∞ set.
# set_username(message, state):
# –û–±–µ—Ä–Ω–∏—Ç–µ –µ—ë –≤ message_handler, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ RegistrationState.username.
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–æ–¥–∏—Ç—å –≤ Telegram-–±–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç):".
# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è message.text –µ—â—ë –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ, —Ç–æ –¥–æ–ª–∂–Ω—ã –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ username –Ω–∞ message.text.
# –î–∞–ª–µ–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π email:" –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ RegistrationState.email.
# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º message.text –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ, —Ç–æ –≤—ã–≤–æ–¥–∏—Ç—å "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç,
# –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è" –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è RegistrationState.username.
# set_email(message, state):
# –û–±–µ—Ä–Ω–∏—Ç–µ –µ—ë –≤ message_handler, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ RegistrationState.email.
# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ RegistrationState.email –Ω–∞ message.text.
# –î–∞–ª–µ–µ –≤—ã–≤–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:":
# –ü–æ—Å–ª–µ –æ–∂–∏–¥–∞—Ç—å –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –≤ –∞—Ç—Ä–∏–±—É—Ç RegistrationState.age.
# set_age(message, state):
# –û–±–µ—Ä–Ω–∏—Ç–µ –µ—ë –≤ message_handler, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ RegistrationState.age.
# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ RegistrationState.age –Ω–∞ message.text.
# –î–∞–ª–µ–µ –±—Ä–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (username, email –∏ age) –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É Users
# –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Ä–∞–Ω–µ–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–π crud-—Ñ—É–Ω–∫—Ü–∏–∏ add_user.
# –í –∫–æ–Ω—Ü–µ –∑–∞–≤–µ—Ä—à–∞—Ç—å –ø—Ä–∏—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø—Ä–∏ –ø–æ–º–æ—â–∏ –º–µ—Ç–æ–¥–∞ finish().
# –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à—É —Ç–∞–±–ª–∏—Ü—É Products 4 –∏–ª–∏ –±–æ–ª–µ–µ –∑–∞–ø–∏—Å—è–º–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ —á–∞—Ç–µ Telegram-–±–æ—Ç–∞.

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
import asyncio
from PIL import Image
import crud_functions


api = "6999041846:AAFqIodeNkSD_lFv1DjzoO1G3TZ1gahVygM"
bot = Bot(token=api)
dp = Dispatcher(bot, storage=MemoryStorage())
all_products = crud_functions.get_all_products()
# print(all_products)
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
kb1 = ReplyKeyboardMarkup(resize_keyboard=True)
kb2 = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
kb3 = InlineKeyboardMarkup()
kb4 = InlineKeyboardMarkup()

# –ö–Ω–æ–ø–∫–∏
button_hi = KeyboardButton('/start üëã')

button1 = KeyboardButton(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å')
button2 = KeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
button3 = KeyboardButton(text='–ö—É–ø–∏—Ç—å')
button4 = KeyboardButton(text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')

in_button1 = InlineKeyboardButton(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π', callback_data='calories')
in_button2 = InlineKeyboardButton(text='–§–æ—Ä–º—É–ª—ã —Ä–∞—Å—á—ë—Ç–∞', callback_data='formulas')
in_button3 = InlineKeyboardButton(text="Product1", callback_data="product_buying")
in_button4 = InlineKeyboardButton(text="Product2", callback_data="product_buying")
in_button5 = InlineKeyboardButton(text="Product3", callback_data="product_buying")
in_button6 = InlineKeyboardButton(text="Product4", callback_data="product_buying")

# –ü—Ä–∏–≤—è–∑–∫–∞ –∫–Ω–æ–ø–æ–∫
kb1.add(button4)
kb1.row(button1, button2, button3)
kb2.add(button_hi)
kb3.row(in_button1, in_button2)
kb4.add(in_button3, in_button4, in_button5, in_button6)


class UserState(StatesGroup):
    gender = State()  # –ø–æ–ª
    age = State()  # –≤–æ–∑—Ä–∞—Å—Ç
    growth = State()  # —Ä–æ—Å—Ç
    weight = State()  # –≤–µ—Å


class RegistrationState(StatesGroup):
    username = State()
    email = State()
    age = State()
    balance = 1000


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.reply("–ù–∞–∂–º–∏—Ç–µ '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'", reply_markup=kb1)


@dp.message_handler(text=['–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'])
async def sing_up(message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç):")
    await RegistrationState.username.set()


@dp.message_handler(state=RegistrationState.username)
async def set_username(message, state):
    # await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç):")

    if crud_functions.is_included(message.text) != True:
        await state.update_data(username=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π email:")
        await RegistrationState.email.set()
    if crud_functions.is_included(message.text) == True:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç):")
        await RegistrationState.username.set()

@dp.message_handler(state=RegistrationState.email)
async def set_email(message, state):
    await state.update_data(email=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")
    await RegistrationState.age.set()


@dp.message_handler(state=RegistrationState.age)
async def set_age(message, state):
    await state.update_data(age=message.text)
    data = await state.get_data()
    crud_functions.add_user(data['username'], data['email'], data['age'])
    print(data)
    await state.finish()


@dp.message_handler(text=['–†–∞—Å—Å—á–∏—Ç–∞—Ç—å'])
async def main_menu(message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', reply_markup=kb3)


@dp.message_handler(text=['–ö—É–ø–∏—Ç—å'])
async def get_buying_list(message):
    for i in all_products:
        await message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {i[1]} | –û–ø–∏—Å–∞–Ω–∏–µ: {i[2]} | –¶–µ–Ω–∞: {i[3]}")
        with open(f'foto/{i[4]}', 'rb') as img:
            await message.answer_photo(photo=img)
    # crud_functions.connection.close()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏:', reply_markup=kb4)


@dp.callback_query_handler(text='product_buying')
async def send_confirm_message(call):
    await call.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø—Ä–æ–¥—É–∫—Ç!")


@dp.callback_query_handler(text='formulas')
async def get_formulas(call):
    await call.message.answer("–ñ–µ–Ω—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞: 10 —Ö –≤–µ—Å + 6,25 —Ö —Ä–æ—Å—Ç ‚Äì 5 —Ö –≤–æ–∑—Ä–∞—Å—Ç ‚Äì 161"
                              '\n' "–ú—É–∂—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞: 10 —Ö –≤–µ—Å + 6,25 —Ö —Ä–æ—Å—Ç ‚Äì 5 —Ö –≥–æ–¥–∞ + 5")
    await call.answer()


@dp.callback_query_handler(text='calories')
async def set_gender(call):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª –º—É–∂/–∂–µ–Ω:')
    await UserState.gender.set()
    await call.answer()


@dp.message_handler(state=UserState.gender)
async def set_age(message, state):
    await state.update_data(gender=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:')
    await UserState.age.set()


@dp.message_handler(state=UserState.age)
async def set_growth(message, state):
    await state.update_data(age=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç:')
    await UserState.growth.set()


@dp.message_handler(state=UserState.growth)
async def set_weight(message, state):
    await state.update_data(growth=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å:')
    await UserState.weight.set()


@dp.message_handler(state=UserState.weight)
async def send_calories(message, state):
    await state.update_data(weight=message.text)
    data = await state.get_data()
    if data['gender'] == "–º—É–∂":
        calorie_allowance = ((10 * int(data['weight'])) + (6.25 * int(data['growth'])) - (4.92 * int(data['age'])) + 5)
    elif data['gender'] == "–∂–µ–Ω":
        calorie_allowance = ((10 * int(data['weight'])) + (6.25 * int(data['growth'])) - (4.92 * int(data['age'])) - 161)
    await message.answer(f'–í–∞—à–∞ –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π {calorie_allowance}')
    await state.finish()


@dp.message_handler()
async def all_message(message):
    await message.reply("'–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–º–æ–≥–∞—é—â–∏–π —Ç–≤–æ–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é.'", reply_markup=kb2)
    await message.answer('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.')


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)