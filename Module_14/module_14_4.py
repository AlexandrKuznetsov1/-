# -*- coding: utf-8 -*-

# –ó–∞–¥–∞—á–∞ "–ü—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è –±–∞–∑–∞":
# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞:
# –î–ª—è —Ä–µ—à–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –∫–æ–¥ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–¥–∞—á–∏. –î–æ–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ, —Å–ª–µ–¥—É—è –ø—É–Ω–∫—Ç–∞–º –∑–∞–¥–∞—á–∏ –Ω–∏–∂–µ.
#
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ —Ä–∞–Ω–µ–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è Telegram-–±–æ—Ç–∞:
# –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª crud_functions.py –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–∞–º —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:
# initiate_db, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É Products, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –ø–æ–º–æ—â–∏ SQL –∑–∞–ø—Ä–æ—Å–∞.
# –≠—Ç–∞ —Ç–∞–±–ª–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è:
# id - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –ø–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á
# title(–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞) - —Ç–µ–∫—Å—Ç (–Ω–µ –ø—É—Å—Ç–æ–π)
# description(–æ–ø–∏—Å–∞–Ω–∏–µ) - —Ç–µ–∫—Å—Ç
# price(—Ü–µ–Ω–∞) - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–Ω–µ –ø—É—Å—Ç–æ–π)
# get_all_products, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Products, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø—Ä–∏ –ø–æ–º–æ—â–∏ SQL –∑–∞–ø—Ä–æ—Å–∞.
#
# –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ Telegram-–±–æ—Ç:
# –í —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —Ä–∞–Ω–µ–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é get_all_products.
# –ò–∑–º–µ–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_buying_list –≤ –º–æ–¥—É–ª–µ —Å Telegram-–±–æ—Ç–æ–º,
# –∏—Å–ø–æ–ª—å–∑—É—è –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏—é get_all_products.
# –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤ –≤—ã–≤–æ–¥–∏–º–æ–π –Ω–∞–¥–ø–∏—Å–∏: "–ù–∞–∑–≤–∞–Ω–∏–µ: <title> | –û–ø–∏—Å–∞–Ω–∏–µ: <description> | –¶–µ–Ω–∞: <price>"
# –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à—É —Ç–∞–±–ª–∏—Ü—É Products 4 –∏–ª–∏ –±–æ–ª–µ–µ –∑–∞–ø–∏—Å—è–º–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ —á–∞—Ç–µ Telegram-–±–æ—Ç–∞.

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
import asyncio
from PIL import Image
import crud_functions


api = ""
bot = Bot(token=api)
dp = Dispatcher(bot, storage=MemoryStorage())
all_products = crud_functions.get_all_products()
# print(all_products)
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
kb1 = ReplyKeyboardMarkup(resize_keyboard=True)
kb2 = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
kb3 = InlineKeyboardMarkup()
kb4 = InlineKeyboardMarkup()

# –ö–Ω–æ–ø–∫–∏
button_hi = KeyboardButton('/start üëã')

button1 = KeyboardButton(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å')
button2 = KeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
button3 = KeyboardButton(text='–ö—É–ø–∏—Ç—å')

in_button1 = InlineKeyboardButton(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π', callback_data='calories')
in_button2 = InlineKeyboardButton(text='–§–æ—Ä–º—É–ª—ã —Ä–∞—Å—á—ë—Ç–∞', callback_data='formulas')
in_button3 = InlineKeyboardButton(text="Product1", callback_data="product_buying")
in_button4 = InlineKeyboardButton(text="Product2", callback_data="product_buying")
in_button5 = InlineKeyboardButton(text="Product3", callback_data="product_buying")
in_button6 = InlineKeyboardButton(text="Product4", callback_data="product_buying")

# –ü—Ä–∏–≤—è–∑–∫–∞ –∫–Ω–æ–ø–æ–∫
kb1.row(button1, button2, button3)
kb2.add(button_hi)
kb3.row(in_button1, in_button2)
kb4.add(in_button3, in_button4, in_button5, in_button6)


class UserState(StatesGroup):
    gender = State()  # –ø–æ–ª
    age = State()  # –≤–æ–∑—Ä–∞—Å—Ç
    growth = State()  # —Ä–æ—Å—Ç
    weight = State()  # –≤–µ—Å


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.reply("–ù–∞–∂–º–∏—Ç–µ '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å'", reply_markup=kb1)


@dp.message_handler(text=['–†–∞—Å—Å—á–∏—Ç–∞—Ç—å'])
async def main_menu(message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', reply_markup=kb3)


@dp.message_handler(text=['–ö—É–ø–∏—Ç—å'])
async def get_buying_list(message):
    for i in all_products:
        await message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {i[1]} | –û–ø–∏—Å–∞–Ω–∏–µ: {i[2]} | –¶–µ–Ω–∞: {i[3]}")
        with open(f'foto/{i[4]}', 'rb') as img:
            await message.answer_photo(photo=img)
    # crud_functions.connection.close()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏:', reply_markup=kb4)


@dp.callback_query_handler(text='product_buying')
async def send_confirm_message(call):
    await call.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø—Ä–æ–¥—É–∫—Ç!")

@dp.callback_query_handler(text='formulas')
async def get_formulas(call):
    await call.message.answer("–ñ–µ–Ω—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞: 10 —Ö –≤–µ—Å + 6,25 —Ö —Ä–æ—Å—Ç ‚Äì 5 —Ö –≤–æ–∑—Ä–∞—Å—Ç ‚Äì 161"
                              '\n' "–ú—É–∂—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞: 10 —Ö –≤–µ—Å + 6,25 —Ö —Ä–æ—Å—Ç ‚Äì 5 —Ö –≥–æ–¥–∞ + 5")
    await call.answer()

@dp.callback_query_handler(text='calories')
async def set_gender(call):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª –º—É–∂/–∂–µ–Ω:')
    await UserState.gender.set()
    await call.answer()

@dp.message_handler(state=UserState.gender)
async def set_age(message, state):
    await state.update_data(gender=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:')
    await UserState.age.set()

@dp.message_handler(state=UserState.age)
async def set_growth(message, state):
    await state.update_data(age=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç:')
    await UserState.growth.set()

@dp.message_handler(state=UserState.growth)
async def set_weight(message, state):
    await state.update_data(growth=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å:')
    await UserState.weight.set()

@dp.message_handler(state=UserState.weight)
async def send_calories(message, state):
    await state.update_data(weight=message.text)
    data = await state.get_data()
    if data['gender'] == "–º—É–∂":
        calorie_allowance = ((10 * int(data['weight'])) + (6.25 * int(data['growth'])) - (4.92 * int(data['age'])) + 5)
    elif data['gender'] == "–∂–µ–Ω":
        calorie_allowance = ((10 * int(data['weight'])) + (6.25 * int(data['growth'])) - (4.92 * int(data['age'])) - 161)
    await message.answer(f'–í–∞—à–∞ –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π {calorie_allowance}')
    await state.finish()

@dp.message_handler()
async def all_message(message):
    await message.reply("'–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–º–æ–≥–∞—é—â–∏–π —Ç–≤–æ–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é.'", reply_markup=kb2)
    await message.answer('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.')

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)