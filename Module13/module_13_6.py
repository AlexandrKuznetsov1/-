# -*- coding: utf-8 -*-

# –¶–µ–ª—å: –Ω–∞—É—á–∏—Ç—Å—è —Å–æ–∑–¥–∞–≤–∞—Ç—å Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –Ω–∏—Ö –≤ Telegram-bot.
#
# –ó–∞–¥–∞—á–∞ "–ï—â—ë –±–æ–ª—å—à–µ –≤—ã–±–æ—Ä–∞":
# –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ–¥ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å' –ø—Ä–∏—Å—ã–ª–∞–ª–∞—Å—å Inline-–∫–ª–∞–≤–∏–∞—Ç—Ä—É–∞.
# –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É InlineKeyboardMarkup —Å 2 –∫–Ω–æ–ø–∫–∞–º–∏ InlineKeyboardButton:
# –° —Ç–µ–∫—Å—Ç–æ–º '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π' –∏ callback_data='calories'
# –° —Ç–µ–∫—Å—Ç–æ–º '–§–æ—Ä–º—É–ª—ã —Ä–∞—Å—á—ë—Ç–∞' –∏ callback_data='formulas'
# –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é main_menu(message), –∫–æ—Ç–æ—Ä–∞—è:
# –ë—É–¥–µ—Ç –æ–±—ë—Ä–Ω—É—Ç–∞ –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä message_handler, —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ —Ç–µ–∫—Å—Ç–∞ '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å'.
# –°–∞–º–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ Inline –º–µ–Ω—é –∏ —Ç–µ–∫—Å—Ç '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:'
# –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é get_formulas(call), –∫–æ—Ç–æ—Ä–∞—è:
# –ë—É–¥–µ—Ç –æ–±—ë—Ä–Ω—É—Ç–∞ –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä callback_query_handler, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Ç–µ–∫—Å—Ç 'formulas'.
# –ë—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º—É–ª–æ–π –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞.
# –ò–∑–º–µ–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é set_age –∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –Ω–µ—ë:
# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å–º–µ–Ω–∏—Ç–µ –Ω–∞ callback_query_handler, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Ç–µ–∫—Å—Ç 'calories'.
# –¢–µ–ø–µ—Ä—å —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–µ message, –∞ call. –î–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –±—É–¥–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º - call.message.

# –ü–æ –∏—Ç–æ–≥—É –ø–æ–ª—É—á–∏—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º:
# –í–≤–æ–¥–∏—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ /start
# –ù–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –ø—Ä–∏—Å—ã–ª–∞–µ—Ç—Å—è –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é: '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å' –∏ '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'.
# –í –æ—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å' –ø—Ä–∏—Å—ã–ª–∞–µ—Ç—Å—è Inline –º–µ–Ω—é: '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π' –∏ '–§–æ—Ä–º—É–ª—ã —Ä–∞—Å—á—ë—Ç–∞'
# –ü–æ Inline –∫–Ω–æ–ø–∫–µ '–§–æ—Ä–º—É–ª—ã —Ä–∞—Å—á—ë—Ç–∞' –ø—Ä–∏—Å—ã–ª–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º—É–ª–æ–π.
# –ü–æ Inline –∫–Ω–æ–ø–∫–µ '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π' –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ —Ü–µ–ø–æ—á–∫–µ.

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
import asyncio

api = ""
bot = Bot(token=api)
dp = Dispatcher(bot, storage=MemoryStorage())
kb1 = ReplyKeyboardMarkup(resize_keyboard=True)
kb2 = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
kb3 = InlineKeyboardMarkup()
button_hi = KeyboardButton('/start üëã')
button1 = KeyboardButton(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å')
button2 = KeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
in_button1 = InlineKeyboardButton(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π', callback_data='calories')
in_button2 = InlineKeyboardButton(text='–§–æ—Ä–º—É–ª—ã —Ä–∞—Å—á—ë—Ç–∞', callback_data='formulas')
kb1.row(button1, button2)
kb2.add(button_hi)
kb3.row(in_button1, in_button2)


class UserState(StatesGroup):
    gender = State()  # –ø–æ–ª
    age = State()  # –≤–æ–∑—Ä–∞—Å—Ç
    growth = State()  # —Ä–æ—Å—Ç
    weight = State()  # –≤–µ—Å


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.reply("–ù–∞–∂–º–∏—Ç–µ '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å'", reply_markup=kb1)


@dp.message_handler(text=['–†–∞—Å—Å—á–∏—Ç–∞—Ç—å'])
async def main_menu(message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', reply_markup=kb3)


@dp.callback_query_handler(text='formulas')
async def get_formulas(call):
    await call.message.answer("–ñ–µ–Ω—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞: 10 —Ö –≤–µ—Å + 6,25 —Ö —Ä–æ—Å—Ç ‚Äì 5 —Ö –≤–æ–∑—Ä–∞—Å—Ç ‚Äì 161"
                              '\n' "–ú—É–∂—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞: 10 —Ö –≤–µ—Å + 6,25 —Ö —Ä–æ—Å—Ç ‚Äì 5 —Ö –≥–æ–¥–∞ + 5")
    await call.answer

@dp.callback_query_handler(text='calories')
async def set_gender(call):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª –º—É–∂/–∂–µ–Ω:')
    await UserState.gender.set()
    await call.answer


@dp.message_handler(state=UserState.gender)
async def set_age(message, state):
    await state.update_data(gender=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:')
    await UserState.age.set()


@dp.message_handler(state=UserState.age)
async def set_growth(message, state):
    await state.update_data(age=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç:')
    await UserState.growth.set()


@dp.message_handler(state=UserState.growth)
async def set_weight(message, state):
    await state.update_data(growth=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å:')
    await UserState.weight.set()


@dp.message_handler(state=UserState.weight)
async def send_calories(message, state):
    await state.update_data(weight=message.text)
    data = await state.get_data()
    if data['gender'] == "–º—É–∂":
        calorie_allowance = ((10 * int(data['weight'])) + (6.25 * int(data['growth'])) - (4.92 * int(data['age'])) + 5)
    if data['gender'] == "–∂–µ–Ω":
        calorie_allowance = ((10 * int(data['weight'])) + (6.25 * int(data['growth'])) - (4.92 * int(data['age'])) - 161)
    await message.answer(f'–í–∞—à–∞ –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π {calorie_allowance}')
    await state.finish()


@dp.message_handler()
async def all_message(message):
    await message.reply("'–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–º–æ–≥–∞—é—â–∏–π —Ç–≤–æ–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é.'", reply_markup=kb2)
    await message.answer('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.')

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)