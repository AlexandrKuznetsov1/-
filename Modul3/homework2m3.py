 #Функция с параметрами по умолчанию:
def print_params (a=1, b='строка', c=True):
    print(a, b, c)
print_params() #вызов функции без аргументов, - выводит значения по умолчанию
print_params(2) #вызов функции с одним аргументом, меняет значение объекта (а) на новое, - остальные по умолчанию
print_params([1, 2, 3]) #аналогично предыдущему шагу
print_params(*[1, 2, 3]) #при использовании *args, и соответствии количества элементов в списке количеству объектов в функции, - выводит значния из списка
# Значения print_params(b = 25) и print_params(c = [1,2,3]) не могут работать с данной функцией из-за разного типа данных
print_params(5, 'запомнил')
 # Распаковка параметров:
values_list = [11, 'распакуй', False]
values_dict = {'a':1, 'b': 'строка', 'c': True}
print_params(*values_list)
print_params(**values_dict)
 # Распаковка + отдельные параметры:
values_list_2 = ['Alex', 1]
print_params(*values_list_2, 42) #функция работает, так как 2 элемента списка после распаковки заняли значения 'a' и 'b' соответственно "42" присвоилось 'c'




#Важно!
#Не передавайте списки задавая по умолчанию пустой список!

#(def a(my_list = [])) – это приводит к ошибкам! (подробнее см. урок)

#Можно передавать вот так
#def append_to_list(item, list_my=None):
  #if list_my is None:
    #list_my = []
  #list_my.append(item)
#print(list_my)
